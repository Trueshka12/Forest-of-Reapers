import discord
import discord.ui as ui
import random
import asyncio
from datetime import datetime, UTC, timedelta
from collections import defaultdict
from discord.ext import commands
import logging
import os
from dotenv import load_dotenv

load_dotenv()

APPLICATION_TOKEN = os.getenv("APPLICATION_TOKEN")
MODERATION_TOKEN = os.getenv("MODERATION_TOKEN")

if not APPLICATION_TOKEN or not MODERATION_TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("discord")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter("%(asctime)s:%(levelname)s:%(name)s: %(message)s"))
logger.addHandler(handler)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
APPLICATION_MENU_CHANNEL_ID = 1376868344850026516
APPLICATION_SUBMISSION_CHANNEL_ID = 1376871959211540520
APPLICATION_COOLDOWN = 300
LOG_CHANNEL_ID = 1376859187794939974

# –¢–æ–∫–µ–Ω—ã
# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤
bot1 = commands.Bot(command_prefix='!', intents=discord.Intents.all())
bot2 = commands.Bot(command_prefix='?', intents=discord.Intents.all())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
verification_codes = {}
last_application_times = {}
user_message_log = defaultdict(list)
user_repeat_messages = defaultdict(list)
user_violations = defaultdict(int)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω—Ç–∏–∫—Ä–∞—à —Å–∏—Å—Ç–µ–º—ã
SPAM_THRESHOLD = 5
SPAM_INTERVAL = 10
MENTION_LIMIT = 5
REPEAT_THRESHOLD = 3
CAPS_THRESHOLD = 70
TIMEOUT_DURATION = 1800

class VerificationModal(discord.ui.Modal, title="–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è"):
    def __init__(self, code):
        super().__init__()
        self.user_code = code
        self.code_input = discord.ui.TextInput(
            label=f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: {code}",
            placeholder=f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: {code}",
            required=True,
            max_length=4
        )
        self.add_item(self.code_input)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            entered_code = self.code_input.value

            if entered_code == str(self.user_code):
                role_verified = discord.utils.get(interaction.guild.roles, name="User")
                role_unverified = discord.utils.get(interaction.guild.roles, name="unverify")

                if role_verified:
                    await interaction.user.add_roles(role_verified)
                    if role_unverified:
                        await interaction.user.remove_roles(role_unverified)

                    if interaction.user.id in verification_codes:
                        del verification_codes[interaction.user.id]

                    await interaction.response.send_message("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã! –†–æ–ª—å 'unverify' —Å–Ω—è—Ç–∞, —Ä–æ–ª—å 'User' –≤—ã–¥–∞–Ω–∞!", ephemeral=True)
                    logger.info(f"User {interaction.user} successfully verified")
                else:
                    await interaction.response.send_message("‚ö†Ô∏è –†–æ–ª—å 'User' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
            else:
                await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", ephemeral=True)

        except discord.errors.NotFound:
            logger.error(f"Verification modal interaction expired for user {interaction.user}")
            try:
                embed = discord.Embed(
                    title="‚ö†Ô∏è –°–µ–∞–Ω—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫",
                    description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ.",
                    color=discord.Color.orange()
                )
                await interaction.user.send(embed=embed)
            except:
                pass
        except discord.errors.InteractionResponded:
            logger.error(f"Verification modal interaction already responded for user {interaction.user}")
        except Exception as e:
            logger.error(f"Error in verification modal submission: {e}")
            try:
                if not interaction.response.is_done():
                    await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.", ephemeral=True)
            except:
                pass

class ApplicationModal(discord.ui.Modal):
    def __init__(self, composition: str):
        super().__init__(title=f"–ó–∞—è–≤–∫–∞ –≤ {composition}")
        self.composition = composition

    age = discord.ui.TextInput(
        label="–°–∫–æ–ª—å–∫–æ –í–∞–º –õ–µ—Ç?",
        placeholder="–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç...",
        required=True,
        max_length=3
    )

    clans_experience = discord.ui.TextInput(
        label="–û–ø—ã—Ç –≤ –ö–ª–∞–Ω–∞—Ö",
        placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ –≤ –∫–ª–∞–Ω–∞—Ö...",
        style=discord.TextStyle.paragraph,
        required=True,
        max_length=4000
    )

    skills = discord.ui.TextInput(
        label="–ß—Ç–æ –í—ã –£–º–µ–µ—Ç–µ?",
        placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö –∏ —É–º–µ–Ω–∏—è—Ö...",
        style=discord.TextStyle.paragraph,
        required=True,
        max_length=4000
    )

    time_dedication = discord.ui.TextInput(
        label="–°–∫–æ–ª—å–∫–æ –ì–æ—Ç–æ–≤—ã –£–¥–µ–ª—è—Ç—å –í—Ä–µ–º–µ–Ω–∏ –ö–ª–∞–Ω—É?",
        placeholder="–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –∫–ª–∞–Ω—É...",
        style=discord.TextStyle.paragraph,
        required=True,
        max_length=4000
    )

    async def on_submit(self, interaction: discord.Interaction):
        try:
            user_id = interaction.user.id
            now = datetime.now(UTC)

            if user_id in last_application_times:
                delta = now - last_application_times[user_id]
                if delta.total_seconds() < APPLICATION_COOLDOWN:
                    remaining = APPLICATION_COOLDOWN - delta.total_seconds()
                    await interaction.response.send_message(
                        f"‚è∞ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {int(remaining)} —Å–µ–∫—É–Ω–¥.",
                        ephemeral=True
                    )
                    return

            last_application_times[user_id] = now

            channel = bot1.get_channel(1376871959211540520)
            if not channel:
                await interaction.response.send_message("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
                return

            embed = discord.Embed(
                title=f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - {self.composition}",
                color=discord.Color.blue()
            )
            embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=f"{interaction.user.mention}\n`{interaction.user}`", inline=True)
            embed.add_field(name="üéÇ –í–æ–∑—Ä–∞—Å—Ç", value=f"`{self.age.value}`", inline=True)
            embed.add_field(name="‚è∞ –í—Ä–µ–º—è –¥–ª—è –∫–ª–∞–Ω–∞", value=f"```{self.time_dedication.value[:500]}```", inline=True)
            embed.add_field(name="üèõÔ∏è –û–ø—ã—Ç –≤ –∫–ª–∞–Ω–∞—Ö", value=f"```{self.clans_experience.value[:800]}```", inline=False)
            embed.add_field(name="üõ†Ô∏è –ù–∞–≤—ã–∫–∏ –∏ —É–º–µ–Ω–∏—è", value=f"```{self.skills.value[:800]}```", inline=False)

            embed.set_thumbnail(url=interaction.user.display_avatar.url)
            embed.set_footer(text=f"ID: {interaction.user.id} ‚Ä¢ {now.strftime('%d.%m.%Y %H:%M')}")

            await channel.send(embed=embed, view=ModActionView(interaction.user, self.composition))

            try:
                user_embed = discord.Embed(
                    title="‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
                    description=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ **{self.composition}** —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.",
                    color=discord.Color.green()
                )
                await interaction.user.send(embed=user_embed)
            except:
                pass

            await interaction.response.send_message("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", ephemeral=True)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")
            await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.", ephemeral=True)

class ModActionView(discord.ui.View):
    def __init__(self, applicant: discord.User, composition: str):
        super().__init__(timeout=86400)
        self.applicant = applicant
        self.composition = composition

    @discord.ui.button(label="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.success)
    async def accept(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = interaction.message.embeds[0]
        embed.color = discord.Color.green()
        embed.title = "‚úÖ –ó–ê–Ø–í–ö–ê –ü–†–ò–ù–Ø–¢–ê"
        embed.add_field(name="üë®‚Äçüíº –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=f"{interaction.user.mention}", inline=True)
        embed.add_field(name="üìÖ –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è", value=f"<t:{int(datetime.now(UTC).timestamp())}:R>", inline=True)

        await interaction.response.edit_message(embed=embed, view=None)

        try:
            accept_embed = discord.Embed(
                title="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!",
                description=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ **{self.composition}** –±—ã–ª–∞ **–ø—Ä–∏–Ω—è—Ç–∞**!",
                color=discord.Color.green()
            )
            await self.applicant.send(embed=accept_embed)
        except:
            pass

    @discord.ui.button(label="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger)
    async def reject(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = interaction.message.embeds[0]
        embed.color = discord.Color.red()
        embed.title = "‚ùå –ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê"
        embed.add_field(name="üë®‚Äçüíº –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=f"{interaction.user.mention}", inline=True)
        embed.add_field(name="üìÖ –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è", value=f"<t:{int(datetime.now(UTC).timestamp())}:R>", inline=True)

        await interaction.response.edit_message(embed=embed, view=None)

        try:
            reject_embed = discord.Embed(
                title="üòî –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                description=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ **{self.composition}** –±—ã–ª–∞ **–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**.",
                color=discord.Color.red()
            )
            await self.applicant.send(embed=reject_embed)
        except:
            pass



class ApplicationView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="I", style=discord.ButtonStyle.secondary, custom_id="app_i_composition")
    async def i_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            if not interaction.response.is_done():
                await interaction.response.send_modal(ApplicationModal("üèÜ I –°–æ—Å—Ç–∞–≤"))
        except discord.errors.NotFound:
            logger.error("Interaction expired or unknown for I composition")
        except discord.errors.InteractionResponded:
            logger.error("Interaction already acknowledged for I composition")
        except Exception as e:
            logger.error(f"Error in I button: {e}")

    @discord.ui.button(label="II", style=discord.ButtonStyle.secondary, custom_id="app_ii_composition")
    async def ii_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            if not interaction.response.is_done():
                await interaction.response.send_modal(ApplicationModal("‚öîÔ∏è II –°–æ—Å—Ç–∞–≤"))
        except discord.errors.NotFound:
            logger.error("Interaction expired or unknown for II composition")
        except discord.errors.InteractionResponded:
            logger.error("Interaction already acknowledged for II composition")
        except Exception as e:
            logger.error(f"Error in II button: {e}")

    @discord.ui.button(label="III", style=discord.ButtonStyle.secondary, custom_id="app_iii_composition")
    async def iii_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            if not interaction.response.is_done():
                await interaction.response.send_modal(ApplicationModal("üõ°Ô∏è III –°–æ—Å—Ç–∞–≤"))
        except discord.errors.NotFound:
            logger.error("Interaction expired or unknown for III composition")
        except discord.errors.InteractionResponded:
            logger.error("Interaction already acknowledged for III composition")
        except Exception as e:
            logger.error(f"Error in III button: {e}")

    @discord.ui.button(label="IV", style=discord.ButtonStyle.primary, custom_id="apply_coders")
    async def coders_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            if not interaction.response.is_done():
                await interaction.response.send_modal(ApplicationModal("üíª IV –°–æ—Å—Ç–∞–≤"))
        except discord.errors.NotFound:
            logger.error("Interaction expired or unknown for IV composition")
        except discord.errors.InteractionResponded:
            logger.error("Interaction already acknowledged for IV composition")
        except Exception as e:
            logger.error(f"Error in IV button: {e}")

    @discord.ui.button(label="Family", style=discord.ButtonStyle.primary, custom_id="apply_family")
    async def family_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            if not interaction.response.is_done():
                await interaction.response.send_modal(ApplicationModal("üè† Family"))
        except discord.errors.NotFound:
            logger.error("Interaction expired or unknown for Family composition")
        except discord.errors.InteractionResponded:
            logger.error("Interaction already acknowledged for Family composition")
        except Exception as e:
            logger.error(f"Error in Family button: {e}")


class VerificationView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", style=discord.ButtonStyle.primary, emoji="‚úÖ", custom_id="verify_button")
    async def verify_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ
            if interaction.response.is_done():
                logger.warning(f"Interaction already responded for user {interaction.user}")
                return

            user_id = interaction.user.id

            if user_id in verification_codes:
                code = verification_codes[user_id]
            else:
                code = random.randint(1000, 9999)
                verification_codes[user_id] = code

            # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç —Å –º–æ–¥–∞–ª–∫–æ–π
            await interaction.response.send_modal(VerificationModal(code))
            logger.info(f"Verification modal sent to {interaction.user}")

        except discord.errors.NotFound:
            logger.error(f"Interaction expired or unknown for verification from user {interaction.user}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ
            try:
                embed = discord.Embed(
                    title="‚ö†Ô∏è –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ",
                    description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –µ—â–µ —Ä–∞–∑.",
                    color=discord.Color.orange()
                )
                await interaction.user.send(embed=embed)
            except:
                pass
        except discord.errors.InteractionResponded:
            logger.error(f"Interaction already acknowledged for verification from user {interaction.user}")
        except Exception as e:
            logger.error(f"Error in verification button: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            try:
                if not interaction.response.is_done():
                    await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", ephemeral=True)
            except:
                pass

# –ê–Ω—Ç–∏–∫—Ä–∞—à —Å–∏—Å—Ç–µ–º–∞
async def timeout_user(member: discord.Member, reason="–ù–∞—Ä—É—à–µ–Ω–∏–µ", duration=TIMEOUT_DURATION):
    try:
        timeout_until = datetime.now(UTC) + timedelta(seconds=duration)
        await member.timeout(timeout_until, reason=reason)
        logger.info(f"–¢–∞–π–º-–∞—É—Ç –≤—ã–¥–∞–Ω {member} –Ω–∞ {duration}—Å –∑–∞: {reason}")
        return True
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ç–∞–π–º-–∞—É—Ç {member}: {e}")
        return False

async def log_violation(guild, user, reason, msg_content="", deletion_success=True, timeout_success=True):
    try:
        log_channel = guild.get_channel(LOG_CHANNEL_ID)
        if not log_channel:
            logger.warning(f"–õ–æ–≥-–∫–∞–Ω–∞–ª {LOG_CHANNEL_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        user_violations[user.id] += 1

        embed = discord.Embed(
            title="üö® –ê–Ω—Ç–∏–∫—Ä–∞—à: –ù–∞—Ä—É—à–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ",
            color=discord.Color.red(),
            timestamp=datetime.now(UTC)
        )

        embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=f"{user.mention}\n`{user.display_name}` ({user})", inline=True)
        embed.add_field(name="üìç –ö–∞–Ω–∞–ª", value="–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª", inline=True)
        embed.add_field(name="‚ö†Ô∏è –¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è", value=reason, inline=True)

        if msg_content:
            content_preview = msg_content[:100] + "..." if len(msg_content) > 100 else msg_content
            embed.add_field(name="üí¨ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ", value=f"```{content_preview}```", inline=False)

        embed.add_field(name="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ", value="‚úÖ –£—Å–ø–µ—à–Ω–æ" if deletion_success else "‚ùå –ù–µ—É–¥–∞—á–∞", inline=True)
        embed.add_field(name="‚è≥ –¢–∞–π–º-–∞—É—Ç", value="‚úÖ –í—ã–¥–∞–Ω" if timeout_success else "‚ùå –ù–µ—É–¥–∞—á–∞", inline=True)
        embed.add_field(name="üìä –í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π", value=f"{user_violations[user.id]}", inline=True)

        await log_channel.send(embed=embed)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è: {e}")

async def handle_violation(message, member, reason):
    try:
        deletion_success = True
        try:
            await message.delete()
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {member} —É–¥–∞–ª–µ–Ω–æ –∑–∞: {reason}")
        except Exception as e:
            deletion_success = False
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {member}: {e}")

        timeout_success = await timeout_user(member, reason)

        await log_violation(
            message.guild, member, reason, 
            message.content[:100] if message.content else "–ú–µ–¥–∏–∞/—ç–º–±–µ–¥",
            deletion_success, timeout_success
        )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_violation: {e}")

async def check_spam(message):
    try:
        user_id = message.author.id
        now = datetime.now(UTC)

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤—Ä–µ–º—è –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ)
        user_message_log[user_id].append((now, message.content.strip().lower()))

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        recent_messages = [
            (msg_time, content) for msg_time, content in user_message_log[user_id]
            if (now - msg_time).total_seconds() <= SPAM_INTERVAL
        ]
        user_message_log[user_id] = recent_messages

        # –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        contents = [content for _, content in recent_messages]
        most_common = max(set(contents), key=contents.count, default=None)
        count = contents.count(most_common) if most_common else 0

        if count >= SPAM_THRESHOLD:
            await handle_violation(message, message.author, f"–°–ø–∞–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {count}/{SPAM_THRESHOLD}")
            return True

        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞: {e}")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞: {e}")
        return False

async def check_mentions(message):
    try:
        mention_count = len(message.mentions) + len(message.role_mentions)

        if mention_count > MENTION_LIMIT:
            await handle_violation(message, message.author, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {mention_count}/{MENTION_LIMIT}")
            return True

        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        return False

async def check_repeated_messages(message):
    try:
        if not message.content:
            return False

        user_id = message.author.id
        content = message.content.lower().strip()

        user_repeat_messages[user_id].append(content)

        if len(user_repeat_messages[user_id]) > 10:
            user_repeat_messages[user_id] = user_repeat_messages[user_id][-10:]

        recent_same = user_repeat_messages[user_id].count(content)

        if recent_same >= REPEAT_THRESHOLD:
            await handle_violation(message, message.author, f"–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è: {recent_same}/{REPEAT_THRESHOLD}")
            return True

        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤: {e}")
        return False

async def check_caps(message):
    try:
        if not message.content or len(message.content) < 10:
            return False

        caps_count = sum(1 for char in message.content if char.isupper())
        total_letters = sum(1 for char in message.content if char.isalpha())

        if total_letters == 0:
            return False

        caps_percentage = (caps_count / total_letters) * 100

        if caps_percentage >= CAPS_THRESHOLD:
            await handle_violation(message, message.author, f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤: {caps_percentage:.1f}%/{CAPS_THRESHOLD}%")
            return True

        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ö–ê–ü–°: {e}")
        return False

import re

import re

async def check_discord_links(message):
    try:
        content = message.content.lower()

        emoji_letter_map = {
            'üá¶': 'a', 'üáß': 'b', 'üá®': 'c', 'üá©': 'd', 'üá™': 'e', 'üá´': 'f',
            'üá¨': 'g', 'üá≠': 'h', 'üáÆ': 'i', 'üáØ': 'j', 'üá∞': 'k', 'üá±': 'l',
            'üá≤': 'm', 'üá≥': 'n', 'üá¥': 'o', 'üáµ': 'p', 'üá∂': 'q', 'üá∑': 'r',
            'üá∏': 's', 'üáπ': 't', 'üá∫': 'u', 'üáª': 'v', 'üáº': 'w', 'üáΩ': 'x',
            'üáæ': 'y', 'üáø': 'z'
        }

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤, —Ç–æ—á–µ–∫, –¥–µ—Ñ–∏—Å–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ + —ç–º–æ–¥–∑–∏
        normalized = ''.join(emoji_letter_map.get(c, c) for c in content)
        normalized = re.sub(r'[^a-z0-9]', '', normalized)

        if message.author.guild_permissions.manage_messages or \
           message.author.guild_permissions.moderate_members or \
           message.author.guild_permissions.administrator:
            return False

        discord_patterns = [
            'discordgg', 'discordcominvite', 'discordappcominvite',
            'dscgg', 'discordme', 'topggservers'
        ]

        for pattern in discord_patterns:
            if pattern in normalized:
                await handle_violation(message, message.author, f"–û–±—Ö–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞ Discord —Å—Å—ã–ª–∫–∏: {pattern}")
                return True

        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Discord —Å—Å—ã–ª–æ–∫: {e}")
        return False
async def check_txt_attachments(message):
    for attachment in message.attachments:
        if attachment.filename.endswith(".txt"):
            try:
                content = await attachment.read()
                text = content.decode("utf-8", errors="ignore").lower()
                if any(x in text for x in ['discord.gg/', 'http://', 'https://']):
                    await handle_violation(message, message.author, f"–°—Å—ã–ª–∫–∏ –≤ txt-—Ñ–∞–π–ª–µ: {attachment.filename}")
                    return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ txt —Ñ–∞–π–ª–∞: {e}")
    return False

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ exe-—Ñ–∞–π–ª–æ–≤ (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
async def check_exe_attachments(message):
    for attachment in message.attachments:
        if attachment.filename.endswith(".exe"):
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.author} –∑–∞–≥—Ä—É–∑–∏–ª .exe —Ñ–∞–π–ª: {attachment.filename}")
    return False


async def anticrash_check(message):
    try:
        checks = [
            check_spam,
            check_txt_attachments,
            check_exe_attachments,
            check_mentions,
            check_repeated_messages,
            check_caps,
            check_discord_links
        ]

        for check in checks:
            if await check(message):
                return True

        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω—Ç–∏–∫—Ä–∞—à –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False




@bot1.event
async def on_ready():
    logger.info(f'üöÄ –ë–æ—Ç –∑–∞—è–≤–æ–∫ {bot1.user} –∑–∞–ø—É—â–µ–Ω!')

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è View'—à–µ–∫
    try:
        bot1.add_view(ApplicationView())
        bot1.add_view(VerificationView())
        logger.info("‚úÖ View'—à–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ View: {e}")

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω—é –∑–∞—è–≤–æ–∫
    try:
        channel = bot1.get_channel(APPLICATION_SUBMISSION_CHANNEL_ID)
        if channel is None:
            logger.error(f"‚ùå –ö–∞–Ω–∞–ª {APPLICATION_SUBMISSION_CHANNEL_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω (get_channel –≤–µ—Ä–Ω—É–ª None)")
            return

        async for msg in channel.history(limit=50):
            if (msg.author == bot1.user and msg.embeds and msg.embeds[0].title and "–ó–∞—è–≤–∫–∏ –≤ –∫–ª–∞–Ω" in msg.embeds[0].title):
                logger.info("üì® –ú–µ–Ω—é –∑–∞—è–≤–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                break
        else:
            embed = discord.Embed(
                title="üì® –ó–∞—è–≤–∫–∏ –≤ –∫–ª–∞–Ω Forest of Reapers –æ—Ç–∫—Ä—ã—Ç—ã!",
                description="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–∞–≤...",
                color=discord.Color.blue()
            )
            await channel.send(embed=embed, view=ApplicationView())
            logger.info("‚úÖ –ú–µ–Ω—é –∑–∞—è–≤–æ–∫ —Å–æ–∑–¥–∞–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é –∑–∞—è–≤–æ–∫: {e}")


@bot1.event
async def on_message(message):
    if message.author.bot:
        await bot1.process_commands(message)
        return

    if await anticrash_check(message):
        return

    await bot1.process_commands(message)


@bot1.command(name='app')
async def create_application_embed(ctx):
    embed = discord.Embed(
        title="üì® –ó–∞—è–≤–∫–∏ –≤ –∫–ª–∞–Ω Forest of Reapers –æ—Ç–∫—Ä—ã—Ç—ã!",
        description="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–∞–≤, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É:",
        color=discord.Color.blue()
    )
    await ctx.send(embed=embed, view=ApplicationView())


# –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è verify

@bot1.command(name='verify')
async def create_verification_embed(ctx):
    embed = discord.Embed(
        title="‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è",
        description="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        color=discord.Color.green()
    )
    embed.set_image(url="https://cdn.discordapp.com/attachments/900731112811290655/1378050895337623693/Frame_2.png?ex=684271a8&is=68412028&hm=99e453b1b8ac8a879b809fde350bed1dc3bf59d54dfdce3c18de80f613002db4&")
    await ctx.send(embed=embed, view=VerificationView())


# –°–æ–±—ã—Ç–∏—è –±–æ—Ç–∞ 2 (–ú–æ–¥–µ—Ä–∞—Ü–∏—è)
@bot2.event
async def on_ready():
    logger.info(f'–ë–æ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ {bot2.user} –∑–∞–ø—É—â–µ–Ω!')

@bot2.event
async def on_message(message):
    if message.author.bot:
        await bot2.process_commands(message)
        return

    if await anticrash_check(message):
        return

    await bot2.process_commands(message)

@bot2.command(name="clear")
@commands.has_permissions(manage_messages=True)
async def clear_messages(ctx, amount: int = 10):
    try:
        deleted = await ctx.channel.purge(limit=amount + 1)

        embed = discord.Embed(
            title="üßπ –°–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã",
            description=f"–£–¥–∞–ª–µ–Ω–æ {len(deleted)-1} —Å–æ–æ–±—â–µ–Ω–∏–π",
            color=discord.Color.green()
        )

        msg = await ctx.send(embed=embed)
        await asyncio.sleep(5)
        await msg.delete()

        logger.info(f"{len(deleted)-1} —Å–æ–æ–±—â–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω–æ –≤ {ctx.channel} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {ctx.author}")

    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

@bot2.command(name="warn")
@commands.has_permissions(moderate_members=True)
async def warn(ctx, member: discord.Member, *, reason="–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"):
    try:
        embed = discord.Embed(
            title="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ",
            description=f"{member.mention} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
            color=discord.Color.yellow()
        )
        embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
        embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=ctx.author.mention, inline=True)

        await ctx.send(embed=embed)

        try:
            dm_embed = discord.Embed(
                title="‚ö†Ô∏è –í–∞–º –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                description=f"**–ü—Ä–∏—á–∏–Ω–∞:** {reason}",
                color=discord.Color.yellow()
            )
            await member.send(embed=dm_embed)
        except:
            pass

    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot2.command(name="timeout")
@commands.has_permissions(moderate_members=True)
async def timeout_command(ctx, member: discord.Member, duration: int, *, reason="–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"):
    try:
        success = await timeout_user(member, reason, duration)

        if success:
            embed = discord.Embed(
                title="‚è≥ –¢–∞–π–º-–∞—É—Ç –≤—ã–¥–∞–Ω",
                description=f"{member.mention} –ø–æ–ª—É—á–∏–ª —Ç–∞–π–º-–∞—É—Ç",
                color=discord.Color.orange()
            )
            embed.add_field(name="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", value=f"{duration} —Å–µ–∫—É–Ω–¥", inline=True)
            embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
            embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=ctx.author.mention, inline=True)

            await ctx.send(embed=embed)
        else:
            await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ç–∞–π–º-–∞—É—Ç")

    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤
async def main():
    try:
        await asyncio.gather(
            bot1.start(APPLICATION_TOKEN),
            bot2.start(MODERATION_TOKEN)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤: {e}")

if __name__ == "__main__":
    asyncio.run(main())